{"ast":null,"code":"import _asyncToGenerator from \"/Users/jesse/Documents/faux-chezie/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, firstValueFrom } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let ErgService = /*#__PURE__*/(() => {\n  class ErgService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n      this.ergs$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n\n\n    get ergsValue() {\n      return this.ergSubject$.value;\n    }\n\n    getAllErgs() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          /*\n          return this.http.get<ERG[]>(`${environment.api}/ergs`).pipe(\n            map((response) => {\n              //Narrow type check\n              if ('error' in response) {\n                return response;\n              }\n              //Check for the null case, if so assign ergs an empty array.\n              const ergs = this.ergsValue ? this.ergsValue : [];\n              console.log('Made it back');\n              console.log(response);\n              localStorage.setItem('ergs', JSON.stringify(response));\n              this.ergSubject$.next(response);\n              console.log(response);\n              return response;\n            })\n          );*/\n          const response = yield firstValueFrom(_this.http.get(`${environment.api}/ergs`)); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          } //Check for the null case, if so assign ergs an empty array.\n\n\n          const ergs = _this.ergsValue ? _this.ergsValue : [];\n          console.log('Made it back');\n          console.log(response);\n          localStorage.setItem('ergs', JSON.stringify(response));\n\n          _this.ergSubject$.next(response);\n\n          console.log(response);\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n    createErg(ergToCreate) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('ERG');\n          /*return this.http.post<ERG>(`${environment.api}/ergs`, ergToCreate).pipe(\n            map((response) => {\n              console.log(response);\n              //Narrow type check\n              if ('error' in response) {\n                return response;\n              }\n              //Check for the null case, if so assign ergs an empty array.\n              const ergs = this.ergsValue ? this.ergsValue : [];\n              ergs.push(response);\n              localStorage.setItem('ergs', JSON.stringify(ergs));\n              this.ergSubject$.next(ergs);\n              return response;\n            })\n          );*/\n\n          const response = yield firstValueFrom(_this2.http.post(`${environment.api}/ergs`, {\n            erg: ergToCreate\n          })); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          }\n\n          console.log('made it back');\n          console.log(response); //Check for the null case, if so assign ergs an empty array.\n\n          const ergs = _this2.ergsValue ? _this2.ergsValue : [];\n          ergs.push(response);\n          localStorage.setItem('ergs', JSON.stringify(ergs));\n\n          _this2.ergSubject$.next(ergs);\n\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n  }\n\n  //end class\n  ErgService.ɵfac = function ErgService_Factory(t) {\n    return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ErgService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErgService,\n    factory: ErgService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErgService;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/erg.service.ts"],"names":["BehaviorSubject","firstValueFrom","environment","i0","i1","i2","ErgService","constructor","router","http","ergSubject$","JSON","parse","localStorage","getItem","ergs$","asObservable","ergsValue","value","getAllErgs","response","get","api","ergs","console","log","setItem","stringify","next","err","createErg","ergToCreate","post","erg","push","ɵfac","ErgService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, firstValueFrom } from 'rxjs';\n//Local imports\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class ErgService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n        this.ergs$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n    get ergsValue() {\n        return this.ergSubject$.value;\n    }\n    async getAllErgs() {\n        try {\n            /*\n            return this.http.get<ERG[]>(`${environment.api}/ergs`).pipe(\n              map((response) => {\n                //Narrow type check\n                if ('error' in response) {\n                  return response;\n                }\n                //Check for the null case, if so assign ergs an empty array.\n                const ergs = this.ergsValue ? this.ergsValue : [];\n                console.log('Made it back');\n                console.log(response);\n                localStorage.setItem('ergs', JSON.stringify(response));\n                this.ergSubject$.next(response);\n                console.log(response);\n                return response;\n              })\n            );*/\n            const response = await firstValueFrom(this.http.get(`${environment.api}/ergs`));\n            //Narrow type check\n            if ('error' in response) {\n                return response;\n            }\n            //Check for the null case, if so assign ergs an empty array.\n            const ergs = this.ergsValue ? this.ergsValue : [];\n            console.log('Made it back');\n            console.log(response);\n            localStorage.setItem('ergs', JSON.stringify(response));\n            this.ergSubject$.next(response);\n            console.log(response);\n            return response;\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    async createErg(ergToCreate) {\n        try {\n            console.log('ERG');\n            /*return this.http.post<ERG>(`${environment.api}/ergs`, ergToCreate).pipe(\n              map((response) => {\n                console.log(response);\n                //Narrow type check\n                if ('error' in response) {\n                  return response;\n                }\n                //Check for the null case, if so assign ergs an empty array.\n                const ergs = this.ergsValue ? this.ergsValue : [];\n                ergs.push(response);\n                localStorage.setItem('ergs', JSON.stringify(ergs));\n                this.ergSubject$.next(ergs);\n                return response;\n              })\n            );*/\n            const response = await firstValueFrom(this.http.post(`${environment.api}/ergs`, { erg: ergToCreate }));\n            //Narrow type check\n            if ('error' in response) {\n                return response;\n            }\n            console.log('made it back');\n            console.log(response);\n            //Check for the null case, if so assign ergs an empty array.\n            const ergs = this.ergsValue ? this.ergsValue : [];\n            ergs.push(response);\n            localStorage.setItem('ergs', JSON.stringify(ergs));\n            this.ergSubject$.next(ergs);\n            return response;\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n} //end class\nErgService.ɵfac = function ErgService_Factory(t) { return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nErgService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ErgService, factory: ErgService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}