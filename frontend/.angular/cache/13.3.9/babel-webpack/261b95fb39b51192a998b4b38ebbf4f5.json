{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let ErgService = /*#__PURE__*/(() => {\n  class ErgService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n      this.erg$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n\n\n    get ergsValue() {\n      return this.ergSubject$.value;\n    }\n\n    getAllErgs() {\n      try {\n        return this.http.get(`${environment.api}/ergs`).pipe(map(response => {\n          //Narrow type check\n          if ('error' in response) {\n            return response;\n          }\n\n          console.log('Made it back');\n          console.log(response);\n          localStorage.setItem('ergs', JSON.stringify(response));\n          this.ergSubject$.next(response);\n          console.log(response);\n          return response;\n        }));\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    }\n\n    createErg(ergToCreate) {\n      try {\n        return this.http.post(`${environment.api}/ergs`, {\n          erg: ergToCreate\n        }).pipe(map(response => {\n          console.log(response); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          }\n\n          localStorage.setItem('ergs', JSON.stringify(response));\n          this.ergSubject$.next(response);\n          return response;\n        }));\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    }\n\n  }\n\n  //end class\n  ErgService.ɵfac = function ErgService_Factory(t) {\n    return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ErgService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErgService,\n    factory: ErgService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErgService;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/erg.service.ts"],"names":["BehaviorSubject","map","environment","i0","i1","i2","ErgService","constructor","router","http","ergSubject$","JSON","parse","localStorage","getItem","erg$","asObservable","ergsValue","value","getAllErgs","get","api","pipe","response","console","log","setItem","stringify","next","err","createErg","ergToCreate","post","erg","ɵfac","ErgService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, map } from 'rxjs';\n//Local imports\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class ErgService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n        this.erg$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n    get ergsValue() {\n        return this.ergSubject$.value;\n    }\n    getAllErgs() {\n        try {\n            return this.http.get(`${environment.api}/ergs`).pipe(map((response) => {\n                //Narrow type check\n                if ('error' in response) {\n                    return response;\n                }\n                console.log('Made it back');\n                console.log(response);\n                localStorage.setItem('ergs', JSON.stringify(response));\n                this.ergSubject$.next(response);\n                console.log(response);\n                return response;\n            }));\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    createErg(ergToCreate) {\n        try {\n            return this.http\n                .post(`${environment.api}/ergs`, { erg: ergToCreate })\n                .pipe(map((response) => {\n                console.log(response);\n                //Narrow type check\n                if ('error' in response) {\n                    return response;\n                }\n                localStorage.setItem('ergs', JSON.stringify(response));\n                this.ergSubject$.next(response);\n                return response;\n            }));\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n} //end class\nErgService.ɵfac = function ErgService_Factory(t) { return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nErgService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ErgService, factory: ErgService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}