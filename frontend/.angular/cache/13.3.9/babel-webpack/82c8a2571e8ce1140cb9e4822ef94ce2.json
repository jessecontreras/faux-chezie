{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from '../_models/alert.model';\nimport * as i0 from \"@angular/core\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor() {\n      this.subject$ = new Subject();\n      this.defaultId = 'default-alert';\n    } // enable subscribing to alerts observable\n\n\n    onAlert(id = this.defaultId) {\n      return this.subject$.asObservable().pipe(filter(x => x && x.id === id));\n    } // convenience methods\n\n\n    success(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Success,\n        message\n      })));\n    }\n\n    error(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Error,\n        message\n      })));\n    }\n\n    info(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Info,\n        message\n      })));\n    }\n\n    warn(message, options) {\n      this.alert(new Alert(Object.assign(Object.assign({}, options), {\n        type: AlertType.Warning,\n        message\n      })));\n    }\n    /**\n     * Main alert method.\n     * @param {Alert} alert Alert object.\n     */\n\n\n    alert(alert) {\n      alert.id = alert.id || this.defaultId;\n      this.subject$.next(alert);\n    }\n    /**\n     * Clear Alerts.\n     * @param {string} id alert id.\n     */\n\n\n    clear(id = this.defaultId) {\n      this.subject$.next(new Alert({\n        id\n      }));\n    }\n\n  }\n\n  AlertService.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)();\n  };\n\n  AlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlertService;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/alert.service.ts"],"names":["Subject","filter","Alert","AlertType","i0","AlertService","constructor","subject$","defaultId","onAlert","id","asObservable","pipe","x","success","message","options","alert","Object","assign","type","Success","error","Error","info","Info","warn","Warning","next","clear","ɵfac","AlertService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from '../_models/alert.model';\nimport * as i0 from \"@angular/core\";\nexport class AlertService {\n    constructor() {\n        this.subject$ = new Subject();\n        this.defaultId = 'default-alert';\n    }\n    // enable subscribing to alerts observable\n    onAlert(id = this.defaultId) {\n        return this.subject$.asObservable().pipe(filter((x) => x && x.id === id));\n    }\n    // convenience methods\n    success(message, options) {\n        this.alert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Success, message })));\n    }\n    error(message, options) {\n        this.alert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Error, message })));\n    }\n    info(message, options) {\n        this.alert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Info, message })));\n    }\n    warn(message, options) {\n        this.alert(new Alert(Object.assign(Object.assign({}, options), { type: AlertType.Warning, message })));\n    }\n    /**\n     * Main alert method.\n     * @param {Alert} alert Alert object.\n     */\n    alert(alert) {\n        alert.id = alert.id || this.defaultId;\n        this.subject$.next(alert);\n    }\n    /**\n     * Clear Alerts.\n     * @param {string} id alert id.\n     */\n    clear(id = this.defaultId) {\n        this.subject$.next(new Alert({ id }));\n    }\n}\nAlertService.ɵfac = function AlertService_Factory(t) { return new (t || AlertService)(); };\nAlertService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AlertService, factory: AlertService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}