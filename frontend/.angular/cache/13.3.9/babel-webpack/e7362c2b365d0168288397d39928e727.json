{"ast":null,"code":"import _asyncToGenerator from \"/Users/jesse/Documents/faux-chezie/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, map } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.userSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n    this.user$ = this.userSubject$.asObservable();\n  }\n  /**\n   * Easy getter for user.\n   */\n\n\n  get userValue() {\n    return this.userSubject$.value;\n  }\n\n  authUser(email, password) {\n    try {\n      console.log('Auth user, meh');\n      /* const response = await firstValueFrom(\n        this.http.post<User | ServerError>(\n          `${environment.api}/accounts/authentication`,\n          {\n            email,\n            password,\n          }\n        )\n      );\n      //In narrow type check\n      if ('error' in response) {\n        return response;\n      }\n      //If response is a User instance, save to localstorage and update userSubject\n      //if (response instanceof User) {\n      console.log('Instance user');\n      const user = response;\n      localStorage.setItem('user', JSON.stringify(user));\n      this.userSubject$.next(user);\n      // }\n      return response;*/\n\n      return this.http.post(`${environment.api}/accounts/authentication`, {\n        email,\n        password\n      }).pipe(map(response => {\n        //Narrow type check\n        if ('error' in response) {\n          return response;\n        } // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n\n        localStorage.setItem('user', JSON.stringify(response));\n        this.userSubject$.next(response);\n        return response;\n      }));\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  }\n\n  logout() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      localStorage.removeItem('user');\n\n      _this.userSubject$.next(null);\n\n      _this.router.navigate(['/login']);\n    })();\n  }\n\n}\n\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/account.service.ts"],"names":["BehaviorSubject","map","environment","i0","i1","i2","AccountService","constructor","router","http","userSubject$","JSON","parse","localStorage","getItem","user$","asObservable","userValue","value","authUser","email","password","console","log","post","api","pipe","response","setItem","stringify","next","err","logout","removeItem","navigate","ɵfac","AccountService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,GAA1B,QAAqC,MAArC,C,CACA;;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,YAAL,GAAoB,IAAIV,eAAJ,CAAoBW,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB,CAApB;AACA,SAAKC,KAAL,GAAa,KAAKL,YAAL,CAAkBM,YAAlB,EAAb;AACH;AACD;AACJ;AACA;;;AACiB,MAATC,SAAS,GAAG;AACZ,WAAO,KAAKP,YAAL,CAAkBQ,KAAzB;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACtB,QAAI;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACY,aAAO,KAAKd,IAAL,CACFe,IADE,CACI,GAAEtB,WAAW,CAACuB,GAAI,0BADtB,EACiD;AACpDL,QAAAA,KADoD;AAEpDC,QAAAA;AAFoD,OADjD,EAKFK,IALE,CAKGzB,GAAG,CAAE0B,QAAD,IAAc;AACxB;AACA,YAAI,WAAWA,QAAf,EAAyB;AACrB,iBAAOA,QAAP;AACH,SAJuB,CAKxB;;;AACAd,QAAAA,YAAY,CAACe,OAAb,CAAqB,MAArB,EAA6BjB,IAAI,CAACkB,SAAL,CAAeF,QAAf,CAA7B;AACA,aAAKjB,YAAL,CAAkBoB,IAAlB,CAAuBH,QAAvB;AACA,eAAOA,QAAP;AACH,OATY,CALN,CAAP;AAeH,KAtCD,CAuCA,OAAOI,GAAP,EAAY;AACRT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACA,YAAMA,GAAN;AACH;AACJ;;AACKC,EAAAA,MAAM,GAAG;AAAA;;AAAA;AACXnB,MAAAA,YAAY,CAACoB,UAAb,CAAwB,MAAxB;;AACA,MAAA,KAAI,CAACvB,YAAL,CAAkBoB,IAAlB,CAAuB,IAAvB;;AACA,MAAA,KAAI,CAACtB,MAAL,CAAY0B,QAAZ,CAAqB,CAAC,QAAD,CAArB;AAHW;AAId;;AA9DuB;;AAgE5B5B,cAAc,CAAC6B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI/B,cAAV,EAA0BH,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,MAAf,CAA1B,EAAkDpC,EAAE,CAACmC,QAAH,CAAYjC,EAAE,CAACmC,UAAf,CAAlD,CAAP;AAAuF,CAAlJ;;AACAlC,cAAc,CAACmC,KAAf,GAAuB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,cAAT;AAAyBsC,EAAAA,OAAO,EAAEtC,cAAc,CAAC6B,IAAjD;AAAuDU,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { BehaviorSubject, map } from 'rxjs';\n//Local imports\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AccountService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.userSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n        this.user$ = this.userSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n    get userValue() {\n        return this.userSubject$.value;\n    }\n    authUser(email, password) {\n        try {\n            console.log('Auth user, meh');\n            /* const response = await firstValueFrom(\n              this.http.post<User | ServerError>(\n                `${environment.api}/accounts/authentication`,\n                {\n                  email,\n                  password,\n                }\n              )\n            );\n            //In narrow type check\n            if ('error' in response) {\n              return response;\n            }\n            //If response is a User instance, save to localstorage and update userSubject\n            //if (response instanceof User) {\n            console.log('Instance user');\n            const user = response;\n            localStorage.setItem('user', JSON.stringify(user));\n            this.userSubject$.next(user);\n            // }\n            return response;*/\n            return this.http\n                .post(`${environment.api}/accounts/authentication`, {\n                email,\n                password,\n            })\n                .pipe(map((response) => {\n                //Narrow type check\n                if ('error' in response) {\n                    return response;\n                }\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(response));\n                this.userSubject$.next(response);\n                return response;\n            }));\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    async logout() {\n        localStorage.removeItem('user');\n        this.userSubject$.next(null);\n        this.router.navigate(['/login']);\n    }\n}\nAccountService.ɵfac = function AccountService_Factory(t) { return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nAccountService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AccountService, factory: AccountService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}