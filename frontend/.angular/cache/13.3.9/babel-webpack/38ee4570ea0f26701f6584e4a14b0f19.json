{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../_services/account.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService, route) {\n      this.router = router;\n      this.accountService = accountService;\n      this.route = route;\n    }\n\n    canActivate(route, state) {\n      const user = this.accountService.userValue; //const user = this.accountService.user;\n\n      if (user) {\n        // logged in so return true\n        // get return url from query parameters or default to home page\n        // const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        //this.router.navigateByUrl('');\n        return true;\n      } // not logged in so redirect to login page with the return url\n\n\n      this.router.navigate(['/account/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i1.ActivatedRoute));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_helpers/auth.guard.ts"],"names":["i0","i1","i2","AuthGuard","constructor","router","accountService","route","canActivate","state","user","userValue","navigate","queryParams","returnUrl","url","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","AccountService","ActivatedRoute","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,WAAaC,SAAb;AAAO,QAAMA,SAAN,CAAgB;AACnBC,IAAAA,WAAW,CAACC,MAAD,EAASC,cAAT,EAAyBC,KAAzB,EAAgC;AACvC,WAAKF,MAAL,GAAcA,MAAd;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACA,WAAKC,KAAL,GAAaA,KAAb;AACH;;AACDC,IAAAA,WAAW,CAACD,KAAD,EAAQE,KAAR,EAAe;AACtB,YAAMC,IAAI,GAAG,KAAKJ,cAAL,CAAoBK,SAAjC,CADsB,CAEtB;;AACA,UAAID,IAAJ,EAAU;AACN;AACA;AACA;AACA;AACA,eAAO,IAAP;AACH,OATqB,CAUtB;;;AACA,WAAKL,MAAL,CAAYO,QAAZ,CAAqB,CAAC,gBAAD,CAArB,EAAyC;AACrCC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,SAAS,EAAEL,KAAK,CAACM;AAAnB;AADwB,OAAzC;AAGA,aAAO,KAAP;AACH;;AArBkB;;AAuBvBZ,EAAAA,SAAS,CAACa,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,WAAO,KAAKA,CAAC,IAAIf,SAAV,EAAqBH,EAAE,CAACmB,QAAH,CAAYlB,EAAE,CAACmB,MAAf,CAArB,EAA6CpB,EAAE,CAACmB,QAAH,CAAYjB,EAAE,CAACmB,cAAf,CAA7C,EAA6ErB,EAAE,CAACmB,QAAH,CAAYlB,EAAE,CAACqB,cAAf,CAA7E,CAAP;AAAsH,GAAvK;;AACAnB,EAAAA,SAAS,CAACoB,KAAV,GAAkB,aAAcvB,EAAE,CAACwB,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAEtB,SAAT;AAAoBuB,IAAAA,OAAO,EAAEvB,SAAS,CAACa,IAAvC;AAA6CW,IAAAA,UAAU,EAAE;AAAzD,GAAtB,CAAhC;AAxBA,SAAaxB,SAAb;AAAA","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../_services/account.service\";\nexport class AuthGuard {\n    constructor(router, accountService, route) {\n        this.router = router;\n        this.accountService = accountService;\n        this.route = route;\n    }\n    canActivate(route, state) {\n        const user = this.accountService.userValue;\n        //const user = this.accountService.user;\n        if (user) {\n            // logged in so return true\n            // get return url from query parameters or default to home page\n            // const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n            //this.router.navigateByUrl('');\n            return true;\n        }\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/account/login'], {\n            queryParams: { returnUrl: state.url },\n        });\n        return false;\n    }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i1.ActivatedRoute)); };\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}