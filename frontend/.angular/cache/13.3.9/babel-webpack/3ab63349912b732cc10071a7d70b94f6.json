{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\nlet ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor() {\n      this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n\n    setColorschemesOptions(options) {\n      this.pColorschemesOptions = options;\n      this.colorschemesOptions.next(options);\n    }\n\n    getColorschemesOptions() {\n      return this.pColorschemesOptions;\n    }\n\n  }\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)();\n  };\n\n  ThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BaseChartDirective = /*#__PURE__*/(() => {\n  class BaseChartDirective {\n    constructor(element, zone, themeService) {\n      this.zone = zone;\n      this.themeService = themeService;\n      this.type = 'bar';\n      this.plugins = [];\n      this.chartClick = new EventEmitter();\n      this.chartHover = new EventEmitter();\n      this.subs = [];\n      this.ctx = element.nativeElement.getContext('2d');\n      this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(r => this.themeChanged(r)));\n    }\n\n    ngOnChanges(changes) {\n      const requireRender = ['type'];\n      const propertyNames = Object.getOwnPropertyNames(changes);\n\n      if (propertyNames.some(key => requireRender.includes(key)) || propertyNames.every(key => changes[key].isFirstChange())) {\n        this.render();\n      } else {\n        const config = this.getChartConfiguration();\n\n        if (this.chart) {\n          Object.assign(this.chart.config.data, config.data);\n\n          if (this.chart.config.plugins) {\n            Object.assign(this.chart.config.plugins, config.plugins);\n          }\n\n          if (this.chart.config.options) {\n            Object.assign(this.chart.config.options, config.options);\n          }\n        }\n\n        this.update();\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = void 0;\n      }\n\n      this.subs.forEach(s => s.unsubscribe());\n    }\n\n    render() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n\n      Chart.register(...this.plugins);\n      return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n    }\n\n    update(duration) {\n      if (this.chart) {\n        this.zone.runOutsideAngular(() => {\n          var _a;\n\n          return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration);\n        });\n      }\n    }\n\n    hideDataset(index, hidden) {\n      if (this.chart) {\n        this.chart.getDatasetMeta(index).hidden = hidden;\n        this.update();\n      }\n    }\n\n    isDatasetHidden(index) {\n      var _a, _b;\n\n      return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\n    }\n\n    toBase64Image() {\n      var _a;\n\n      return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\n    }\n\n    themeChanged(options) {\n      this.themeOverrides = options;\n\n      if (this.chart) {\n        if (this.chart.config.options) {\n          Object.assign(this.chart.config.options, this.getChartOptions());\n        }\n\n        this.update();\n      }\n    }\n\n    getChartOptions() {\n      return merge({\n        onHover: (event, active) => {\n          var _a;\n\n          if (!this.chartHover.observed && !((_a = this.chartHover.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n          }\n\n          this.zone.run(() => this.chartHover.emit({\n            event,\n            active\n          }));\n        },\n        onClick: (event, active) => {\n          var _a;\n\n          if (!this.chartClick.observed && !((_a = this.chartClick.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n          }\n\n          this.zone.run(() => this.chartClick.emit({\n            event,\n            active\n          }));\n        }\n      }, this.themeOverrides, this.options, {\n        plugins: {\n          legend: {\n            display: this.legend\n          }\n        }\n      });\n    }\n\n    getChartConfiguration() {\n      return {\n        type: this.type,\n        data: this.getChartData(),\n        options: this.getChartOptions()\n      };\n    }\n\n    getChartData() {\n      return this.data ? this.data : {\n        labels: this.labels || [],\n        datasets: this.datasets || []\n      };\n    }\n\n  }\n\n  BaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {\n    return new (t || BaseChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ThemeService));\n  };\n\n  BaseChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseChartDirective,\n    selectors: [[\"canvas\", \"baseChart\", \"\"]],\n    inputs: {\n      type: \"type\",\n      legend: \"legend\",\n      data: \"data\",\n      options: \"options\",\n      plugins: \"plugins\",\n      labels: \"labels\",\n      datasets: \"datasets\"\n    },\n    outputs: {\n      chartClick: \"chartClick\",\n      chartHover: \"chartHover\"\n    },\n    exportAs: [\"base-chart\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BaseChartDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nconst builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: context => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.datasetIndex), 1)\n    },\n\n    get radar() {\n      return this.line;\n    },\n\n    doughnut: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get pie() {\n      return this.doughnut;\n    },\n\n    polarArea: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get bubble() {\n      return this.doughnut;\n    },\n\n    get scatter() {\n      return this.doughnut;\n    },\n\n    get area() {\n      return this.polarArea;\n    }\n\n  }\n};\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\n\n\nfunction generateColor(index = 0) {\n  return baseColors[index] || getRandomColor();\n}\n\nlet NgChartsConfiguration = /*#__PURE__*/(() => {\n  class NgChartsConfiguration {}\n\n  NgChartsConfiguration.ɵfac = function NgChartsConfiguration_Factory(t) {\n    return new (t || NgChartsConfiguration)();\n  };\n\n  NgChartsConfiguration.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgChartsConfiguration,\n    factory: NgChartsConfiguration.ɵfac,\n    providedIn: 'root'\n  });\n  return NgChartsConfiguration;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nChart.register(...registerables);\nlet NgChartsModule = /*#__PURE__*/(() => {\n  class NgChartsModule {\n    constructor(config) {\n      if (config === null || config === void 0 ? void 0 : config.plugins) Chart.register(...(config === null || config === void 0 ? void 0 : config.plugins));\n      const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\n      defaults.set(ngChartsDefaults);\n    }\n\n    static forRoot(config) {\n      return {\n        ngModule: NgChartsModule,\n        providers: [{\n          provide: NgChartsConfiguration,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  NgChartsModule.ɵfac = function NgChartsModule_Factory(t) {\n    return new (t || NgChartsModule)(i0.ɵɵinject(NgChartsConfiguration, 8));\n  };\n\n  NgChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgChartsModule\n  });\n  NgChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgChartsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/node_modules/ng2-charts/fesm2015/ng2-charts.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Input","Output","NgModule","Optional","Chart","registerables","defaults","distinctUntilChanged","merge","BehaviorSubject","ThemeService","constructor","colorschemesOptions","undefined","setColorschemesOptions","options","pColorschemesOptions","next","getColorschemesOptions","ɵfac","ɵprov","BaseChartDirective","element","zone","themeService","type","plugins","chartClick","chartHover","subs","ctx","nativeElement","getContext","push","pipe","subscribe","r","themeChanged","ngOnChanges","changes","requireRender","propertyNames","Object","getOwnPropertyNames","some","key","includes","every","isFirstChange","render","config","getChartConfiguration","chart","assign","data","update","ngOnDestroy","destroy","forEach","s","unsubscribe","register","runOutsideAngular","duration","_a","hideDataset","index","hidden","getDatasetMeta","isDatasetHidden","_b","toBase64Image","themeOverrides","getChartOptions","onHover","event","active","observed","observers","length","run","emit","onClick","legend","display","getChartData","labels","datasets","ElementRef","NgZone","ɵdir","baseColors","builtInDefaults","line","backgroundColor","context","rgba","generateColor","datasetIndex","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","bar","hoverBackgroundColor","hoverBorderColor","radar","doughnut","dataIndex","pie","polarArea","bubble","scatter","area","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","getRandomColor","NgChartsConfiguration","NgChartsModule","ngChartsDefaults","set","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n    constructor() {\n        this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n    setColorschemesOptions(options) {\n        this.pColorschemesOptions = options;\n        this.colorschemesOptions.next(options);\n    }\n    getColorschemesOptions() {\n        return this.pColorschemesOptions;\n    }\n}\nThemeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nThemeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass BaseChartDirective {\n    constructor(element, zone, themeService) {\n        this.zone = zone;\n        this.themeService = themeService;\n        this.type = 'bar';\n        this.plugins = [];\n        this.chartClick = new EventEmitter();\n        this.chartHover = new EventEmitter();\n        this.subs = [];\n        this.ctx = element.nativeElement.getContext('2d');\n        this.subs.push(this.themeService.colorschemesOptions\n            .pipe(distinctUntilChanged())\n            .subscribe(r => this.themeChanged(r)));\n    }\n    ngOnChanges(changes) {\n        const requireRender = ['type'];\n        const propertyNames = Object.getOwnPropertyNames(changes);\n        if (propertyNames.some(key => requireRender.includes(key)) ||\n            propertyNames.every(key => changes[key].isFirstChange())) {\n            this.render();\n        }\n        else {\n            const config = this.getChartConfiguration();\n            if (this.chart) {\n                Object.assign(this.chart.config.data, config.data);\n                if (this.chart.config.plugins) {\n                    Object.assign(this.chart.config.plugins, config.plugins);\n                }\n                if (this.chart.config.options) {\n                    Object.assign(this.chart.config.options, config.options);\n                }\n            }\n            this.update();\n        }\n    }\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n        this.subs.forEach(s => s.unsubscribe());\n    }\n    render() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        Chart.register(...this.plugins);\n        return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n    }\n    update(duration) {\n        if (this.chart) {\n            this.zone.runOutsideAngular(() => { var _a; return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration); });\n        }\n    }\n    hideDataset(index, hidden) {\n        if (this.chart) {\n            this.chart.getDatasetMeta(index).hidden = hidden;\n            this.update();\n        }\n    }\n    isDatasetHidden(index) {\n        var _a, _b;\n        return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\n    }\n    toBase64Image() {\n        var _a;\n        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\n    }\n    themeChanged(options) {\n        this.themeOverrides = options;\n        if (this.chart) {\n            if (this.chart.config.options) {\n                Object.assign(this.chart.config.options, this.getChartOptions());\n            }\n            this.update();\n        }\n    }\n    getChartOptions() {\n        return merge({\n            onHover: (event, active) => {\n                var _a;\n                if (!this.chartHover.observed && !((_a = this.chartHover.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n                    return;\n                }\n                this.zone.run(() => this.chartHover.emit({ event, active }));\n            },\n            onClick: (event, active) => {\n                var _a;\n                if (!this.chartClick.observed && !((_a = this.chartClick.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n                    return;\n                }\n                this.zone.run(() => this.chartClick.emit({ event, active }));\n            }\n        }, this.themeOverrides, this.options, {\n            plugins: {\n                legend: {\n                    display: this.legend\n                }\n            }\n        });\n    }\n    getChartConfiguration() {\n        return {\n            type: this.type,\n            data: this.getChartData(),\n            options: this.getChartOptions()\n        };\n    }\n    getChartData() {\n        return this.data ? this.data : {\n            labels: this.labels || [],\n            datasets: this.datasets || []\n        };\n    }\n}\nBaseChartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Directive });\nBaseChartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.11\", type: BaseChartDirective, selector: \"canvas[baseChart]\", inputs: { type: \"type\", legend: \"legend\", data: \"data\", options: \"options\", plugins: \"plugins\", labels: \"labels\", datasets: \"datasets\" }, outputs: { chartClick: \"chartClick\", chartHover: \"chartHover\" }, exportAs: [\"base-chart\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: 'canvas[baseChart]',\n                    exportAs: 'base-chart',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: ThemeService }]; }, propDecorators: { type: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], plugins: [{\n                type: Input\n            }], labels: [{\n                type: Input\n            }], datasets: [{\n                type: Input\n            }], chartClick: [{\n                type: Output\n            }], chartHover: [{\n                type: Output\n            }] } });\n\nconst baseColors = [\n    [255, 99, 132],\n    [54, 162, 235],\n    [255, 206, 86],\n    [231, 233, 237],\n    [75, 192, 192],\n    [151, 187, 205],\n    [220, 220, 220],\n    [247, 70, 74],\n    [70, 191, 189],\n    [253, 180, 92],\n    [148, 159, 177],\n    [77, 83, 96]\n];\n\nconst builtInDefaults = {\n    datasets: {\n        line: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.4),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 0.8)\n        },\n        bar: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 1)\n        },\n        get radar() {\n            return this.line;\n        },\n        doughnut: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: '#fff',\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get pie() {\n            return this.doughnut;\n        },\n        polarArea: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get bubble() {\n            return this.doughnut;\n        },\n        get scatter() {\n            return this.doughnut;\n        },\n        get area() {\n            return this.polarArea;\n        }\n    }\n};\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\nfunction generateColor(index = 0) {\n    return baseColors[index] || getRandomColor();\n}\n\nclass NgChartsConfiguration {\n}\nNgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nChart.register(...registerables);\nclass NgChartsModule {\n    constructor(config) {\n        if (config === null || config === void 0 ? void 0 : config.plugins)\n            Chart.register(...config === null || config === void 0 ? void 0 : config.plugins);\n        const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\n        defaults.set(ngChartsDefaults);\n    }\n    static forRoot(config) {\n        return {\n            ngModule: NgChartsModule,\n            providers: [\n                { provide: NgChartsConfiguration, useValue: config }\n            ]\n        };\n    }\n}\nNgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, deps: [{ token: NgChartsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nNgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, declarations: [BaseChartDirective], exports: [BaseChartDirective] });\nNgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [BaseChartDirective],\n                    exports: [BaseChartDirective]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: NgChartsConfiguration, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };\n"]},"metadata":{},"sourceType":"module"}