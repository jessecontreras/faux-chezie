{"ast":null,"code":"import _asyncToGenerator from \"/Users/jesse/Documents/faux-chezie/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, firstValueFrom } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let ErgService = /*#__PURE__*/(() => {\n  class ErgService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n      this.ergs$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n\n\n    get ergsValue() {\n      return this.ergSubject$.value;\n    }\n\n    getAllErgs() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield firstValueFrom(_this.http.get(`${environment.api}/ergs`)); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          } //Check for the null case, if so assign ergs an empty array.\n\n\n          const ergs = _this.ergsValue ? _this.ergsValue : [];\n          console.log('Made it back');\n          console.log(response);\n          localStorage.setItem('ergs', JSON.stringify(response));\n\n          _this.ergSubject$.next(response);\n\n          console.log(response);\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n    createErg(ergToCreate) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield firstValueFrom(_this2.http.post(`${environment.api}/ergs`, {\n            erg: ergToCreate\n          })); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          }\n\n          console.log('made it back');\n          console.log(response); //Check for the null case, if so assign ergs an empty array.\n\n          const ergs = _this2.ergsValue ? _this2.ergsValue : [];\n          ergs.push(response);\n          localStorage.setItem('ergs', JSON.stringify(ergs));\n\n          _this2.ergSubject$.next(ergs);\n\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n    deleteErg(_id) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n\n        try {\n          console.log('delete erg');\n          const response = yield firstValueFrom(_this3.http.delete(`${environment.api}/ergs/${_id}`));\n          console.log(response); //Get index of erg to remove from ergs.\n\n          const ergIndex = (_a = _this3.ergsValue) === null || _a === void 0 ? void 0 : _a.findIndex(erg => {\n            return erg._id === response._id;\n          });\n          console.log(`Index is:${ergIndex}`); //Remove erg from our ergsValue array.\n\n          (_b = _this3.ergsValue) === null || _b === void 0 ? void 0 : _b.splice(ergIndex, 1); //update our local storage ergs\n\n          localStorage.setItem('ergs', JSON.stringify(_this3.ergsValue)); //update our subject to broadcast changes to subcribers.\n\n          _this3.ergSubject$.next(_this3.ergsValue);\n\n          return;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n  }\n\n  //end class\n  ErgService.ɵfac = function ErgService_Factory(t) {\n    return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ErgService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErgService,\n    factory: ErgService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErgService;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/erg.service.ts"],"names":["BehaviorSubject","firstValueFrom","environment","i0","i1","i2","ErgService","constructor","router","http","ergSubject$","JSON","parse","localStorage","getItem","ergs$","asObservable","ergsValue","value","getAllErgs","response","get","api","ergs","console","log","setItem","stringify","next","err","createErg","ergToCreate","post","erg","push","deleteErg","_id","_a","_b","delete","ergIndex","findIndex","splice","ɵfac","ErgService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, firstValueFrom } from 'rxjs';\n//Local imports\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class ErgService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n        this.ergs$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n    get ergsValue() {\n        return this.ergSubject$.value;\n    }\n    async getAllErgs() {\n        try {\n            const response = await firstValueFrom(this.http.get(`${environment.api}/ergs`));\n            //Narrow type check\n            if ('error' in response) {\n                return response;\n            }\n            //Check for the null case, if so assign ergs an empty array.\n            const ergs = this.ergsValue ? this.ergsValue : [];\n            console.log('Made it back');\n            console.log(response);\n            localStorage.setItem('ergs', JSON.stringify(response));\n            this.ergSubject$.next(response);\n            console.log(response);\n            return response;\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    async createErg(ergToCreate) {\n        try {\n            const response = await firstValueFrom(this.http.post(`${environment.api}/ergs`, { erg: ergToCreate }));\n            //Narrow type check\n            if ('error' in response) {\n                return response;\n            }\n            console.log('made it back');\n            console.log(response);\n            //Check for the null case, if so assign ergs an empty array.\n            const ergs = this.ergsValue ? this.ergsValue : [];\n            ergs.push(response);\n            localStorage.setItem('ergs', JSON.stringify(ergs));\n            this.ergSubject$.next(ergs);\n            return response;\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    async deleteErg(_id) {\n        var _a, _b;\n        try {\n            console.log('delete erg');\n            const response = await firstValueFrom(this.http.delete(`${environment.api}/ergs/${_id}`));\n            console.log(response);\n            //Get index of erg to remove from ergs.\n            const ergIndex = (_a = this.ergsValue) === null || _a === void 0 ? void 0 : _a.findIndex((erg) => {\n                return erg._id === response._id;\n            });\n            console.log(`Index is:${ergIndex}`);\n            //Remove erg from our ergsValue array.\n            (_b = this.ergsValue) === null || _b === void 0 ? void 0 : _b.splice(ergIndex, 1);\n            //update our local storage ergs\n            localStorage.setItem('ergs', JSON.stringify(this.ergsValue));\n            //update our subject to broadcast changes to subcribers.\n            this.ergSubject$.next(this.ergsValue);\n            return;\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n} //end class\nErgService.ɵfac = function ErgService_Factory(t) { return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nErgService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ErgService, factory: ErgService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}