{"ast":null,"code":"import _asyncToGenerator from \"/Users/jesse/Documents/faux-chezie/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, firstValueFrom } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let ErgService = /*#__PURE__*/(() => {\n  class ErgService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.ergSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('ergs')));\n      this.ergs$ = this.ergSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n\n\n    get ergsValue() {\n      return this.ergSubject$.value;\n    }\n    /**\n     * Gets all ERG\n     * @returns {Promise<ERG[]|[]>} An array of ERGs or a lone array.\n     */\n\n\n    getAllErgs() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield firstValueFrom(_this.http.get(`${environment.api}/ergs`)); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          } //Check for the null case, if so assign ergs an empty array.\n\n\n          const ergs = _this.ergsValue ? _this.ergsValue : [];\n          localStorage.setItem('ergs', JSON.stringify(response));\n\n          _this.ergSubject$.next(response);\n\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n    /**\n     * Creates ERG.\n     * @param ergToCreate - ERG object to be created.\n     * @returns {<Promise<ERG>} - ERG value.\n     */\n\n\n    createErg(ergToCreate) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield firstValueFrom(_this2.http.post(`${environment.api}/ergs`, {\n            erg: ergToCreate\n          })); //Narrow type check\n\n          if ('error' in response) {\n            return response;\n          } //Check for the null case, if so assign ergs an empty array.\n\n\n          const ergs = _this2.ergsValue ? _this2.ergsValue : [];\n          ergs.push(response);\n          localStorage.setItem('ergs', JSON.stringify(ergs));\n\n          _this2.ergSubject$.next(ergs);\n\n          return response;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n    /**\n     * Delete selected ERG.\n     * @param _id - ERG id.\n     * @returns {Promise<void>}\n     */\n\n\n    deleteErg(_id) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n\n        try {\n          const response = yield firstValueFrom(_this3.http.delete(`${environment.api}/ergs/${_id}`)); //Get index of erg to remove from ergs.\n\n          const ergIndex = (_a = _this3.ergsValue) === null || _a === void 0 ? void 0 : _a.findIndex(erg => {\n            return erg._id === response._id;\n          }); //Remove erg from our ergsValue array.\n\n          (_b = _this3.ergsValue) === null || _b === void 0 ? void 0 : _b.splice(ergIndex, 1); //update our local storage ergs\n\n          localStorage.setItem('ergs', JSON.stringify(_this3.ergsValue)); //update our subject to broadcast changes to subcribers.\n\n          _this3.ergSubject$.next(_this3.ergsValue);\n\n          return;\n        } catch (err) {\n          console.log(err);\n          throw err;\n        }\n      })();\n    }\n\n  }\n\n  //end class\n  ErgService.ɵfac = function ErgService_Factory(t) {\n    return new (t || ErgService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ErgService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErgService,\n    factory: ErgService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErgService;\n})();","map":null,"metadata":{},"sourceType":"module"}