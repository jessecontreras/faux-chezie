{"ast":null,"code":"import _asyncToGenerator from \"/Users/jesse/Documents/faux-chezie/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, map } from 'rxjs'; //Local imports\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.userSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user$ = this.userSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n\n\n    get userValue() {\n      return this.userSubject$.value;\n    }\n    /**\n     * Authorizes user login.\n     */\n\n\n    authUser(email, password) {\n      try {\n        return this.http.post(`${environment.api}/accounts/authentication`, {\n          email,\n          password\n        }).pipe(map(response => {\n          //Narrow type check\n          if ('error' in response) {\n            return response;\n          } // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n\n          localStorage.setItem('user', JSON.stringify(response));\n          this.userSubject$.next(response);\n          return response;\n        }));\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    }\n    /**\n     * Logs user out of account.\n     */\n\n\n    logout() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        localStorage.removeItem('user');\n\n        _this.userSubject$.next(null);\n\n        _this.router.navigate(['/account/login']);\n      })();\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_services/account.service.ts"],"names":["BehaviorSubject","map","environment","i0","i1","i2","AccountService","constructor","router","http","userSubject$","JSON","parse","localStorage","getItem","user$","asObservable","userValue","value","authUser","email","password","post","api","pipe","response","setItem","stringify","next","err","console","log","logout","removeItem","navigate","ɵfac","AccountService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,GAA1B,QAAqC,MAArC,C,CACA;;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,WAAaC,cAAb;AAAO,QAAMA,cAAN,CAAqB;AACxBC,IAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB,WAAKD,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACA,WAAKC,YAAL,GAAoB,IAAIV,eAAJ,CAAoBW,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB,CAApB;AACA,WAAKC,KAAL,GAAa,KAAKL,YAAL,CAAkBM,YAAlB,EAAb;AACH;AACD;AACJ;AACA;;;AACiB,QAATC,SAAS,GAAG;AACZ,aAAO,KAAKP,YAAL,CAAkBQ,KAAzB;AACH;AACD;AACJ;AACA;;;AACIC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACtB,UAAI;AACA,eAAO,KAAKZ,IAAL,CACFa,IADE,CACI,GAAEpB,WAAW,CAACqB,GAAI,0BADtB,EACiD;AACpDH,UAAAA,KADoD;AAEpDC,UAAAA;AAFoD,SADjD,EAKFG,IALE,CAKGvB,GAAG,CAAEwB,QAAD,IAAc;AACxB;AACA,cAAI,WAAWA,QAAf,EAAyB;AACrB,mBAAOA,QAAP;AACH,WAJuB,CAKxB;;;AACAZ,UAAAA,YAAY,CAACa,OAAb,CAAqB,MAArB,EAA6Bf,IAAI,CAACgB,SAAL,CAAeF,QAAf,CAA7B;AACA,eAAKf,YAAL,CAAkBkB,IAAlB,CAAuBH,QAAvB;AACA,iBAAOA,QAAP;AACH,SATY,CALN,CAAP;AAeH,OAhBD,CAiBA,OAAOI,GAAP,EAAY;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,cAAMA,GAAN;AACH;AACJ;AACD;AACJ;AACA;;;AACUG,IAAAA,MAAM,GAAG;AAAA;;AAAA;AACXnB,QAAAA,YAAY,CAACoB,UAAb,CAAwB,MAAxB;;AACA,QAAA,KAAI,CAACvB,YAAL,CAAkBkB,IAAlB,CAAuB,IAAvB;;AACA,QAAA,KAAI,CAACpB,MAAL,CAAY0B,QAAZ,CAAqB,CAAC,gBAAD,CAArB;AAHW;AAId;;AA9CuB;;AAgD5B5B,EAAAA,cAAc,CAAC6B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,WAAO,KAAKA,CAAC,IAAI/B,cAAV,EAA0BH,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,MAAf,CAA1B,EAAkDpC,EAAE,CAACmC,QAAH,CAAYjC,EAAE,CAACmC,UAAf,CAAlD,CAAP;AAAuF,GAAlJ;;AACAlC,EAAAA,cAAc,CAACmC,KAAf,GAAuB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAErC,cAAT;AAAyBsC,IAAAA,OAAO,EAAEtC,cAAc,CAAC6B,IAAjD;AAAuDU,IAAAA,UAAU,EAAE;AAAnE,GAAtB,CAArC;AAjDA,SAAavC,cAAb;AAAA","sourcesContent":["import { BehaviorSubject, map } from 'rxjs';\n//Local imports\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AccountService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.userSubject$ = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n        this.user$ = this.userSubject$.asObservable();\n    }\n    /**\n     * Easy getter for user.\n     */\n    get userValue() {\n        return this.userSubject$.value;\n    }\n    /**\n     * Authorizes user login.\n     */\n    authUser(email, password) {\n        try {\n            return this.http\n                .post(`${environment.api}/accounts/authentication`, {\n                email,\n                password,\n            })\n                .pipe(map((response) => {\n                //Narrow type check\n                if ('error' in response) {\n                    return response;\n                }\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(response));\n                this.userSubject$.next(response);\n                return response;\n            }));\n        }\n        catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n    /**\n     * Logs user out of account.\n     */\n    async logout() {\n        localStorage.removeItem('user');\n        this.userSubject$.next(null);\n        this.router.navigate(['/account/login']);\n    }\n}\nAccountService.ɵfac = function AccountService_Factory(t) { return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nAccountService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AccountService, factory: AccountService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}