{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n\n    intercept(request, next) {\n      // add auth header with jwt if user is logged in and request is to the api url\n      const user = this.accountService.userValue;\n      const isLoggedIn = user && user.token;\n      const isApiUrl = request.url.startsWith(environment.api);\n\n      if (isLoggedIn && isApiUrl) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${user.token}`\n          }\n        });\n      }\n\n      return next.handle(request);\n    }\n\n  }\n\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":{"version":3,"sources":["/Users/jesse/Documents/faux-chezie/frontend/src/app/_interceptors/jwt.interceptor.ts"],"names":["environment","i0","i1","JwtInterceptor","constructor","accountService","intercept","request","next","user","userValue","isLoggedIn","token","isApiUrl","url","startsWith","api","clone","setHeaders","Authorization","handle","ɵfac","JwtInterceptor_Factory","t","ɵɵinject","AccountService","ɵprov","ɵɵdefineInjectable","factory"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,WAAaC,cAAb;AAAO,QAAMA,cAAN,CAAqB;AACxBC,IAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,WAAKA,cAAL,GAAsBA,cAAtB;AACH;;AACDC,IAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACrB;AACA,YAAMC,IAAI,GAAG,KAAKJ,cAAL,CAAoBK,SAAjC;AACA,YAAMC,UAAU,GAAGF,IAAI,IAAIA,IAAI,CAACG,KAAhC;AACA,YAAMC,QAAQ,GAAGN,OAAO,CAACO,GAAR,CAAYC,UAAZ,CAAuBf,WAAW,CAACgB,GAAnC,CAAjB;;AACA,UAAIL,UAAU,IAAIE,QAAlB,EAA4B;AACxBN,QAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc;AACpBC,UAAAA,UAAU,EAAE;AACRC,YAAAA,aAAa,EAAG,UAASV,IAAI,CAACG,KAAM;AAD5B;AADQ,SAAd,CAAV;AAKH;;AACD,aAAOJ,IAAI,CAACY,MAAL,CAAYb,OAAZ,CAAP;AACH;;AAjBuB;;AAmB5BJ,EAAAA,cAAc,CAACkB,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,WAAO,KAAKA,CAAC,IAAIpB,cAAV,EAA0BF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,cAAf,CAA1B,CAAP;AAAmE,GAA9H;;AACAtB,EAAAA,cAAc,CAACuB,KAAf,GAAuB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEf,IAAAA,KAAK,EAAET,cAAT;AAAyByB,IAAAA,OAAO,EAAEzB,cAAc,CAACkB;AAAjD,GAAtB,CAArC;AApBA,SAAalB,cAAb;AAAA","sourcesContent":["import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport class JwtInterceptor {\n    constructor(accountService) {\n        this.accountService = accountService;\n    }\n    intercept(request, next) {\n        // add auth header with jwt if user is logged in and request is to the api url\n        const user = this.accountService.userValue;\n        const isLoggedIn = user && user.token;\n        const isApiUrl = request.url.startsWith(environment.api);\n        if (isLoggedIn && isApiUrl) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            });\n        }\n        return next.handle(request);\n    }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) { return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService)); };\nJwtInterceptor.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: JwtInterceptor, factory: JwtInterceptor.ɵfac });\n"]},"metadata":{},"sourceType":"module"}